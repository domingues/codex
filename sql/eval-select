#! /usr/bin/python3

from utils import *
import argparse
import mysql.connector


def eval_queries(conn, q1, q2):
    c1 = conn.cursor(buffered=True)
    c2 = conn.cursor(buffered=True)

    try:
        c2.execute(q2)
    except mysql.connector.Error as e:
        e.scope = "submission"
        raise e
    try:
        c1.execute(q1)
    except mysql.connector.Error as e:
        e.scope = "answer"
        raise e

    if len(c1.description) != len(c2.description):
        return wrong_answer_msg("Expecting %d columns, got %d." % (len(c1.description), len(c2.description)))
    elif c1.rowcount != c2.rowcount:
        return wrong_answer_msg("Expecting %d rows, got %d." % (c1.rowcount, c2.rowcount))
    else:
        rc = c1.rowcount
        cc = len(c1.description)
        for i in range(rc):
            r1 = c1.fetchone()
            r2 = c2.fetchone()
            for j in range(cc):
                if r1[j] != r2[j]:
                    return wrong_answer_msg("Wrong value on row %d, line %d." % (i + 1, j + 1))
        else:
            return accepted_msg("Returned %d rows." % rc)


def main(host, port, user, passwd, db, answer_sql, submission_sql, answer_file, submission_file):
    conn = None
    try:
        if answer_file != "":
            with open(answer_file, "r") as f:
                answer_sql = f.read()
        if submission_file != "":
            with open(submission_file, "r") as f:
                submission_sql = f.read()

        if submission_sql == "":
            return wrong_answer_msg("Empty query.")
        elif answer_sql == "":
            return system_error_msg("Empty answer provided.")

        conn = mysql.connector.connect(host=host, port=port, user=user, passwd=passwd, db=db, connect_timeout=10,
                                       raw=True)
        return eval_queries(conn, answer_sql, submission_sql)
    except mysql.connector.Error as e:
        return mysql_error_handler(e, e.scope if hasattr(e, "scope") else "system")
    finally:
        if conn is not None:
            conn.close()
        pass


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="""Evaluate a SELECT SQL submission query against an answer.
    
    ./eval-select -H db-exam -u eval_select -p passwd -a "SELECT 1" -s "SELECT 9"
    """, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-H', '--host', dest='host', type=str, default="localhost")
    parser.add_argument('-P', '--port', dest='port', type=int, default=3306)
    parser.add_argument('-u', '--user', dest='user', type=str, default="")
    parser.add_argument('-p', '--passwd', dest='passwd', type=str, default="")
    parser.add_argument('-d', '--db', dest='db', type=str, default="")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-a', '--answer-sql', dest='answer_sql', type=str, default="")
    group.add_argument('-A', '--answer-file', dest='answer_file', type=str, default="")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-s', '--submission-sql', dest='submission_sql', type=str, default="")
    group.add_argument('-S', '--submission-file', dest='submission_file', type=str, default="")
    args = parser.parse_args()

    status, msg = main(args.host, args.port, args.user, args.passwd, args.db, args.answer_sql, args.submission_sql,
                       args.answer_file, args.submission_file)
    print(status)
    if msg is not None:
        print(msg)
